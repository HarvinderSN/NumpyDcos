# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17IaEYRcHBOK0-NBoHsPrTIXAs6GEC2rc

### NUMPY   Library Numerical Physics  / For Scientific Calculation


---
"""

import numpy as np

a = np.array([1,2,3])

a.dtype

a = np.array([1,2,"S"])

a.dtype

sa = np.array(["hi","s","S"])

sa.dtype

a.shape

b= np.array([[(1,2,3),(4,5,6)],[(7,8,9),(10,11,12)]])

b

b.shape

b[1][1][1]

b= np.array([(1,2,3),
             (4,5,6)])

b[1][2]



import time

import sys

"""### NUMPY ARRAY TAKE LESS SPACE IN MEMORY AS COMPARED TO LIST

---


"""

alist = range(1000)

print(alist)

type(alist)

size_aList = sys.getsizeof(5)*len(alist)

size_aList

blist = np.arange(1000)

blist

type(blist)

blist_size = blist.size * b.itemsize

blist_size

blist.size

b.itemsize

blist_size<size_aList



"""### ***NUMPY array computation is faster than List commpuatation***

---


"""

size= 10000000
L1 = range(size)
L2 = range(size)

sum=0
start = time.time()
for i in range(size):
  sum =  sum + L1[i]+L2[i]

print((time.time()-start) * 1000)


N1 = np.arange(size)
N2 = np.arange(size)

start = time.time()
sumN= N1 + N2

print((time.time()-start) * 1000)

a = np.array([1,2,3])
a.ndim

a = np.array([(1,2,3),(4,5,6)])
a.ndim

a.itemsize

a.dtype

size_array= a.itemsize * a.size
size_array

len(a)

a.size

a.shape

"""### **RESHAPE**

---



---



---


"""

a = np.array([(1,2,3),(4,5,6)])
a

a =a.reshape(3,2)
print(a)

"""**Slicing**

---


"""

a = np.array([(1,2,3),(4,5,6)])
a[0,1]
a[1,2]

a[:,:]

a = np.array([(1,2,3),(4,5,6),(7,8,9)])
a[2,:]

np.linspace(1,3,5)

print(a.min(), a.max(), a.sum())

a = np.array([(1,2,3),(4,5,6),(7,8,9)])

a[:,1:]

a[:,1:].shape

a[0:2,:]

a[0:2,:].shape

import pandas as pd
a = np.array([(1,2,3),(4,5,6),(7,8,9)])
pd.DataFrame(a)

a = np.array([(1,2,3),(4,5,6),(7,8,9)])
print(a.sum())
print(a.sum(axis=0))
print(a.sum(axis=1))

a = np.array([(1,2,3),(4,5,6),(7,8,9)])
np.sqrt(a)

np.std(a)

a = np.array([(1,2,3),(4,5,6),(7,8,9)])
a/a

np.square(a)

a+1

a-1

np.var(a)

a = np.array([(-1,2,-3),(-4,5,6),(7,8,9)])
np.absolute(a)

np.sum(a)

a = np.array([(-1,2,-3),(-4,5,6),(7,8,9)])
b = np.array([(-1,2,-3),(-4,5,6),(7,8,9)])
a+b

a-b

a

b

a*b

a/b

np.vstack((a,b))

np.vstack((a,b)).shape

np.hstack((a,b))

np.hstack((a,b)).shape

a.ravel()

import matplotlib.pyplot as plt
angle = np.arange(0,4*np.pi, 0.1)
y= np.sin(angle)
plt.plot(angle,y)

import matplotlib.pyplot as plt
angle = np.arange(0,4*np.pi, 0.1)
y= np.tan(angle)
plt.plot(angle,y)

a

a = np.array([(1,2,-3),(-4,5,6),(7,8,9)])
np.exp(a)

a = np.array([(1,2,-3),(-4,5,6),(7,8,9)])
np.log(a)

a = np.array([(1,2,-3),(-4,5,6),(7,8,9)])
np.log10(a)

a = np.array([(1,2,-3),(-4,5,6),(7,8,9)])
np.log2(a)

a = np.array([[(1,2,-3),(-4,5,6),(7,8,9)],[(1,1,1),(1,1,1),(1,1,1)]])
print(a.ndim)
print(a.shape)
print(a.itemsize)
print(a.size)

a = [1,2,3]
b=[4,5,6]
c=[]
for i in range(len(a)):
  c.append(a[i]*b[i])
c

a = np.array([1,2,3])
b=np.array([4,5,6])
a*b

a = np.array([[(1,2,-3),(-4,5,6),(7,8,9)],[(1,1,1),(1,1,1),(1,1,1)]])
len(a)

a.size

b=np.array([4,5,6])

len(b)

a = np.array([[(1,2,-3),(-4,5,6),(7,8,9)],[(1,1,1),(1,1,1),(1,1,1)]],dtype=np.float64)
a

a = np.array([1+1.j,2+2.j,-3+2.j])

a.dtype

np.zeros((3,4))

np.ones((3,4),dtype='complex128')

np.arange(2,101,2)



"""***`String Numpy`***

---



---


"""

print(np.char.add(['first ' , "2nd "],['Python','numpy']))

print(np.char.multiply('hello ',3))

print(np.char.center('hello ',20, fillchar='-'))

print(np.array([('hi','hi','hi'),("hello","hello","hello")]))

print(np.array([('hi','hi','hi'),("hello","hello","hello")]).shape)

print(np.array([('hi','hi','hi'),("hello","hello","hello")]).size)

print(np.array([('hi','hi','hi'),("hello","hello","hello")]).dtype)

print(np.array([('hi','hi','hi'),("hello","hello","hello")]).itemsize)

print(np.array([('hi','hi','hi'),("hello","hello","hello")]))

stringArray = np.array([('hi','hi','hi'),("hello","hello","hello")])

# print(np.array([('hi','hi','hi'),("hello","hello",1.0)]),dtype='int64')

np.char.capitalize(stringArray)

df=  pd.DataFrame(stringArray)

df

stringArray = np.array([(' hi ',' hi ', '    hi  '),("hello","hello","hello")])

np.char.strip(stringArray)

stringArray

stringx = '''Hi!! I am here doing good.
And, I would like to see you soon.
Lets check my lates updates '''

np.char.splitlines(stringx)

x= np.char.splitlines(stringx)

stringxy = np.array(np.char.splitlines(stringx))

stringArray = np.array([(' hi ',' hi ', '    hi  '),("hello","hello","hello")])

np.char.replace(stringArray,'hello','damn')

a = np.array([(1,2,-3),(-4,5,6),(7,8,9)])
print(a)

a.flatten(order="F")

a.flatten(order="C")

a.flatten(order="A")

np.arange(12).reshape(3,4)

np.linspace(1,9,9).reshape(3,3,order="F")

np.linspace(1,9,9).reshape(3,3,order="C")

np.linspace(1,9,9).reshape(3,3,order="C").transpose()

x= np.linspace(1,9,9).reshape(3,3,order="C")
x

np.transpose(x)

x= np.linspace(1,8,8,dtype='int64').reshape(2,2,2)
x

x= np.linspace(1,9,9).reshape(3,3)
for n in np.nditer(x) :
  print(n)

x=  np.linspace(1,9,9).reshape(3,3)
x

x= np.linspace(1,9,9).reshape(3,3)
i=0
for n in x :
  i=i+1
  print(i)
  print(n)

x

for n in np.nditer(x,order="F") :
  print(n)

a=  np.array([(1,2),(3,4)])
b=  a +1
print(a)
print(b)

np.concatenate((a,b),axis=0)

np.concatenate((a,b),axis=1
               )

np.vstack((a,b))

np.hstack((a,b))

b=np.hstack((a,b))
b

b.transpose()

np.zeros((6,6), dtype='int64')

x = np.random.randint(1,100, (5,5))

x

z=np.zeros((6,6), dtype='int64')
x=  z.flatten()
for i in range(len(x)):
   if(i%2!=0):
     x[i]=1
print(x)
z=np.array(x).reshape(6,6)
z

z = np.zeros((6,6), dtype='int64')
z

for i in range(len(z)):

  for j in range(len(z[i])):

    if (i%2==0) & (j%2==0):
      z[i][j]=1
    if (i%2!=0) & (j%2!=0):
      z[i][j]=1
    
z

for i in range(len(z)):

  for j in range(len(z[i])):

    if i+j==5:
      z[i][j]=1

    
z

np.random.rand(2,2,2)

np.random.randint(0,100, size=(2,2,2),dtype='int64')

x='str'
np.array(x)

a= np.array([(1,2,np.nan),(np.nan,3 ,5),(5,5,np.nan)])

a

np.isnan(a).sum()

inds=np.where(np.isnan(a))
print(inds)

a[inds]=0

a



a= [1,2,3]
b=[4,5,6]
a+b

a= [1,2,3]
b=[4,5,6]

c=[]
for i in range(3):
  c.append(a[i]+b[i])
c

a=np.array([1,2,3])
b=np.array([4,5,6])

np.add(a,b)

import numpy as np
a=np.array([(1,2,3),
            (4,5,6),
            (7,8,9)])
b=np.array([(11,12,13),
            (14,15,16),
            (1,1,1)])
np.multiply(a,b)

a= [[1,2,3],[4,5,6],[7,8,9]]
b= [[11,12,13],[14,15,16],[1,1,1]]
c= np.zeros((3,3))
for i in range(3):
  for j in range(3):
    c[i][j]=a[i][j]*b[i][j]
c

import numpy as np
a=np.array([(1,2,3),
            (4,5,6),
            (7,8,9)])
b=np.array([(11,12,13),
            (14,15,16),
            (1,1,1)])
np.matmul(a,b)

np.identity(3)

